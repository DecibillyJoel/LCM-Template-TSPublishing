<Project>

  <!-- 
    If we are building, then this TS package and 
    any sub-packages will be built and outputted
    If we are publishing, only this TS package 
    will be built and outputted
  -->

  <PropertyGroup>
    <DeleteExistingFiles>True</DeleteExistingFiles>
    <DeployAsIisApp>False</DeployAsIisApp>
    <EnableMSDeployAppOffline>True</EnableMSDeployAppOffline>
    <EnableMSDeployBackup>False</EnableMSDeployBackup>
    <ExcludeApp_Data>True</ExcludeApp_Data>
    <ExcludeFilesFromAppData>True</ExcludeFilesFromAppData>
    <ExcludeFilesFromDeployment>bin\**;obj\**</ExcludeFilesFromDeployment>
    <LastUsedBuildConfiguration>Release</LastUsedBuildConfiguration>
    <LastUsedPlatform>Any CPU</LastUsedPlatform>
    <LaunchSiteAfterPublish>False</LaunchSiteAfterPublish>
    <MSDeployPublishMethod>FileSystem</MSDeployPublishMethod>
    <PublishDir Condition="'$(IsTSPackager)' == 'True'">$(ArtifactsPath)\tspublish\</PublishDir>
    <BaseOutputPath Condition="'$(IsTSPackager)' == 'True'">$(ArtifactsPath)\tspublish\</BaseOutputPath>
    <PublishFramework>$(TargetFramework)</PublishFramework>
    <PublishProtocol>FileSystem</PublishProtocol>
    <SkipACLAttribute>True</SkipACLAttribute>
    <SkipAppDataFolder>True</SkipAppDataFolder>
    <SkipExtraFilesOnServer>True</SkipExtraFilesOnServer>
    <UsePowerShell>False</UsePowerShell>
    <WebPublishMethod>FileSystem</WebPublishMethod>
  </PropertyGroup>

  <!-- 
    This determines if the package is 
    a sub-package or a lib and disables 
    publishing if so.
  -->
  <PropertyGroup>
    <IsPublishable Condition="'$(PackageDir)' == '$(SolutionDir)'">True</IsPublishable>
    <IsPublishable Condition="'$(PackageDir)' != '$(SolutionDir)'">False</IsPublishable>
    <IsPublishable Condition="$(MSBuildProjectDirectory.startsWith('$(PackageDir)lib\'))">False</IsPublishable>
  </PropertyGroup>

  <!-- 
    All following targets are ran only by 
    ThunderstorePublisher, and only after 
    all dependent projects have built. 
  -->

  <!-- 
    If publishing, declare build mode as "publish"
  -->

  <Target Name="StartThunderstorePublish"
    BeforeTargets="Publish"
    Condition="'$(IsTSPackager)' == 'True'"
  >
    <PropertyGroup>
      <BuildMode>publish</BuildMode>
    </PropertyGroup>
  </Target>

  <!-- 
    If not publishing, declare build mode as "build"
  -->

  <Target
    Name="StartThunderstoreBuild"
    BeforeTargets="BeforeBuild"
    Condition="'$(IsTSPackager)' == 'True' and '$(BuildMode)' == ''"
  >
    <PropertyGroup>
      <BuildMode>build</BuildMode>
    </PropertyGroup>
  </Target>

  <!--
    Invokes the remaining Thunderstore build targets.
  -->

  <Target Name="CoreThunderstoreBuild"
    BeforeTargets="BeforeBuild"
    Condition="'$(BuildMode)' == 'build' or ('$(BuildMode)' == 'publish' and '$(IsPublishable)' == 'True')"
    DependsOnTargets="ValidateThunderstorePackageProps;UpdateThunderstoreTOML;ValidateThunderstoreNuGetDeps;StageThunderstorePackage;CallTCLI;EmitThunderstoreSubpackages"
  />

  <!-- 
    Ensure name, author, description and URL contain 
    only valid characters, and version is in the
    correct format, and description is not too long
  -->

  <Target Name="ValidateThunderstorePackageProps">
    <PropertyGroup>
      <PackageName_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageName)',
          "([^\w])"
        )
      )</PackageName_InvalidMatch>
      <PackageAuthor_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageAuthor)',
          "([^\w])"
        )
      )</PackageAuthor_InvalidMatch>
      <PackageDesc_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageDesc)',
          "([^\x00-\x7F]|.{251,})"
        )
      )</PackageDesc_InvalidMatch>
      <PackageUrl_InvalidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageUrl)',
          "([^\w\.:/\-+!*'\(\)?%=&amp;])"
        )
      )</PackageUrl_InvalidMatch>
      <PackageVersion_ValidMatch>$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(PackageVersion)',
          "^(?:(\d+)\.){0,2}(\d+)$"
        )
      )</PackageVersion_ValidMatch>
    </PropertyGroup>

    <!-- If any matches are found, throw error -->
    <Error Condition="'$(PackageName_InvalidMatch.Length)' > 0" Text="PackageName (defined in Directory.Build.props) contains invalid characters: $(PackageName_InvalidMatch)" />
    <Error Condition="'$(PackageAuthor_InvalidMatch.Length)' > 0" Text="PackageAuthor (defined in Directory.Build.props) contains invalid characters: $(PackageAuthor_InvalidMatch)" />
    <Error Condition="'$(PackageDesc_InvalidMatch.Length)' > 250" Text="PackageDesc (defined in Directory.Build.props) cannot exceed 250 characters!" />
    <Error Condition="'$(PackageDesc_InvalidMatch.Length)' > 0" Text="PackageDesc (defined in Directory.Build.props) contains invalid characters: $(PackageDesc_InvalidMatch)" />
    <Error Condition="'$(PackageUrl_InvalidMatch.Length)' > 0" Text="PackageUrl (defined in Directory.Build.props) contains invalid characters: $(PackageUrl_InvalidMatch)" />  
    <Error Condition="'$(PackageVersion_ValidMatch.Length)' == 0" Text="PackageVersion (defined in Directory.Build.props or by GitHub release tag) is not in valid format (e.g. 'major.minor.patch'): $(PackageVersion)" />
  </Target>

  <!-- 
    Update package description and 
    URL in thunderstore.toml 
  -->
  <Target Name="UpdateThunderstoreTOML">
    <PropertyGroup>
      <TOML_Contents>$([System.IO.File]::ReadAllText("$(MSBuildProjectDirectory)\thunderstore.toml"))</TOML_Contents>
      <TOML_NewContents>$(
        [System.Text.RegularExpressions.Regex]::Replace(
          $(
            [System.Text.RegularExpressions.Regex]::Replace(
              '$(TOML_Contents)',
              '(\n[ \t]*description[ \t]*=[ \t]*)".*"', 
              '$1"$(PackageDesc)"'
            )
          ),
          '(\n[ \t]*websiteUrl[ \t]*=[ \t]*)".*"', 
          '$1"$(PackageUrl)"'
        )
      )</TOML_NewContents>
    </PropertyGroup>
    <WriteLinesToFile File="$(MSBuildProjectDirectory)\thunderstore.toml" Lines="$(TOML_NewContents)" Overwrite="True" WriteOnlyWhenDifferent="True" />
  </Target>

  <!-- 
    Validate that any Thunderstore NuGet dependencies used
    in cs projects are present in the TOML and match versions
  -->
  <Target Name="ValidateThunderstoreNuGetDeps">
    <!-- First, get all packages references by the solution via dotnet CLI -->
    <Exec
      Command='dotnet package list --project "$(PackageDir)\"'
      ConsoleToMSBuild="true"
      WorkingDirectory="$(PackageDir)"
      StandardOutputImportance="low"
    >
      <Output TaskParameter="ConsoleOutput" PropertyName="_SlnPackagesListOutput" />
    </Exec>

    <!-- 
      Then, parse the output using Regex to create an ItemGroup where 
      each Item has its Identity set to the Package ID and an additional
      metadata set to the package's resolved version. Example string:

      "   > LethalCompany.GameLibs.Steam            70.0.0-ngd.0   70.0.0-ngd.0"
    -->
    <PropertyGroup>
      <_PackageListRegex>^\s*?&gt;\s*?(\S+)\s*?\S+\s*?(\S+)\s*?$</_PackageListRegex>
    </PropertyGroup>

    <ItemGroup>
      <_SlnPackagesListLines Include="$(_SlnPackagesListOutput)" />
      <ThunderstoreNuGetDeps
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('%(_SlnPackagesListLines.Identity)', '$(_PackageListRegex)'))"
        Include="$([System.Text.RegularExpressions.Regex]::Match('%(_SlnPackagesListLines.Identity)', '$(_PackageListRegex)').Groups[1].Value)"
        ResolvedVersion="$([System.Text.RegularExpressions.Regex]::Match('%(_SlnPackagesListLines.Identity)', '$(_PackageListRegex)').Groups[2].Value)"
        TOML_Version_Regex=""
        TOML_Version=""
      />
    </ItemGroup>

    <!-- 
      Pause. We need to give BepInEx special consideration. Most
      likely, the project is referencing BepInEx through BepInEx's
      NuGet source rather than Thunderstore's source. So, we will
      treat any presence of BepInEx from any source as a sign to
      include it in the TOML dependencies section. However we
      cannot reliably check the patch number, so ignore it
    -->
    <PropertyGroup Condition="'@ThunderstoreNuGetDeps' != ''">
      <BepInExDepVersion
        Condition="'%(ThunderstoreNuGetDeps.Identity)' == 'BepInEx.Core' or '%(ThunderstoreNuGetDeps.Identity)' == 'BepInEx-BepInExPack'"
      >%(ThunderstoreNuGetDeps.ResolvedVersion)</BepInExDepVersion>
    </PropertyGroup>
    
    <!--
      Next, we want to filter these down to packages that originated from
      the Thunderstore NuGet source. To do this, we first need to know
      where the packages are cached. We will regex match the output of
      the nuget locals command to extract from a string that looks like:

      "global-packages: C:\Users\user\.nuget\packages\"
    -->
    <Exec
      Command='dotnet nuget locals global-packages --list'
      ConsoleToMSBuild="true"
      WorkingDirectory="$(PackageDir)"
      StandardOutputImportance="low"
    >
      <Output TaskParameter="ConsoleOutput" PropertyName="_NuGetPackagesDirOutput" />
    </Exec>
    <PropertyGroup>
      <_NuGetPackagesDir_Regex>^\s*?global-packages:\s*?(\S+)\s*?</_NuGetPackagesDir_Regex>
      <_NuGetPackagesDir
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(_NuGetPackagesDirOutput)', '$(_NuGetPackagesDir_Regex)'))"
      >$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(_NuGetPackagesDirOutput)',
          "$(_NuGetPackagesDir_Regex)"
        )
        .Groups[1].Value.Trim()
      )</_NuGetPackagesDir>
    </PropertyGroup>

    <!--
      Validate that the directory exists
    -->
    <Error Condition="'$(_NuGetPackagesDir)' == ''" Text="Unable to obtain NuGet packages cache dir location" />
    <Error Condition="!Exists('$(_NuGetPackagesDir)')" Text="Unable to locate NuGet packages cache dir: $(_NuGetPackagesDir)" />

    <!--
      Now that we have the NuGet packages cache dir, we can filter out any
      packages for which we cannot find its .nupkg.metadata file (none should
      be removed theoretically, but doing this ensures our sanity)
    -->
    <PropertyGroup Condition="!HasTrailingSlash('$(_NuGetPackagesDir)')">
      <_NuGetPackagesDir>$(_NuGetPackagesDir)\</_NuGetPackagesDir>
    </PropertyGroup>
    <ItemGroup Condition="'@ThunderstoreNuGetDeps' != ''">
      <ThunderstoreNuGetDeps
        Condition="!Exists('$(_NuGetPackagesDir)%(ThunderstoreNuGetDeps.Identity)\%(ThunderstoreNuGetDeps.ResolvedVersion)\.nupkg.metadata')"
        Remove="%(ThunderstoreNuGetDeps.Identity)"
      />
    </ItemGroup>

    <!-- 
      Now that only packages with existing metadata remain, we can further
      filter by the source listed in the metadata - if its source is not
      equal to the Thunderstore NuGet source, then it will be removed

      To get the source for a given package, we need to read the metadata
      file (packagesdir\packagename\packageversion\.nupkg.metadata) and
      regex search for a line that looks like:
      "source": "https://nuget.windows10ce.com/nuget/v3/index.json"
    -->
    <PropertyGroup>
      <_TSSourceUrl>https://nuget.windows10ce.com/nuget/v3/index.json</_TSSourceUrl>
      <_TSSourcePattern>^\s*?\x22source\x22:\s*?\x22$(_TSSourceUrl)\x22,?\s*?$</_TSSourcePattern>
    </PropertyGroup>
    <ItemGroup Condition="'@ThunderstoreNuGetDeps' != ''">
      <ThunderstoreNuGetDeps
        Condition='!$([System.Text.RegularExpressions.Regex]::IsMatch(
          $([System.IO.File]::ReadAllText("$(_NuGetPackagesDir)%(ThunderstoreNuGetDeps.Identity)\%(ThunderstoreNuGetDeps.ResolvedVersion)\.nupkg.metadata")),
          "$(_TSSourcePattern)",
          System.Text.RegularExpressions.RegexOptions.Multiline
        ))'
        Remove="%(ThunderstoreNuGetDeps.Identity)"
      />
    </ItemGroup>
    <!--
      At this point, we have the TS deps, including BepInEx. Now we
      must parse the dependencies from the TOML contents and ensure:
        A) No TS deps are missing from the TOML dependencies section
        B) The versions match between package references and the TOML
    -->
    <PropertyGroup>
      <_TOML_Deps_List_Regex>\[package\.dependencies\]([^\[]+)</_TOML_Deps_List_Regex>
      <_TOML_Deps_List_Text
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(TOML_NewContents)', '$(_TOML_Deps_List_Regex)'))"
      >$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(TOML_NewContents)',
          '$(_TOML_Deps_List_Regex)'
        )
        .Groups[1].Value
      )</_TOML_Deps_List_Text>
    </PropertyGroup>

    <!-- 
      Validate that we were able to find 
      the dependencies section in the TOML
    -->
    <Error Condition="'$(_TOML_Deps_List_Text)' == ''" Text="Unable to locate [package.dependencies] section in thunderstore.toml!" />

    <!-- 
      Now we can validate package presence and version matching!
      First, though, we must handle BepInEx as a special case. 

      Error if BepInEx is present in the project but not in the TOML.
      Warn if TOML version string doesn't start with package version string.
    -->
    <PropertyGroup>
      <_TOML_BepInExVersion_Regex>(?:^|\s)BepInEx-BepInExPack\s*?=\s*?\x22([^\s\x22]*)\x22</_TOML_BepInExVersion_Regex>
      <_TOML_BepInExVersion
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(_TOML_Deps_List_Text)', '$(_TOML_BepInExVersion_Regex)'))"
      >$(
        [System.Text.RegularExpressions.Regex]::Match(
          '$(_TOML_Deps_List_Text)',
          '$(_TOML_BepInExVersion_Regex)'
        )
        .Groups[1].Value
      )</_TOML_BepInExVersion>
    </PropertyGroup>
    <Error 
      Condition="'$(BepInExDepVersion)' != '' and '$(_TOML_BepInExVersion)' == ''"
      Text='Missing dependency in thunderstore.toml: BepInEx-BepInExPack="5.4.2100"'
    />
    <Warning 
      Condition="'$(BepInExDepVersion)' != '' and !$([System.String]::new('$(_TOML_BepInExVersion)').StartsWith('$(BepInExDepVersion)'))"
      Text="Possible BepInEx version mismatch between PackageReference ($(BepInExDepVersion)) and thunderstore.toml ($(_TOML_BepInExVersion))"
    />

    <!-- Remove BepInEx from the list of deps to be validated -->
    <ItemGroup>
      <ThunderstoreNuGetDeps Remove="BepInEx.Core" />
      <ThunderstoreNuGetDeps Remove="BepInEx-BepInExPack" />
    </ItemGroup>

    <!-- 
      Get each version specified in the TOML, or leave the
      metadata blank if it is not present in the TOML
    -->
    <ItemGroup Condition="'@(ThunderstoreNuGetDeps)' != ''">
      <ThunderstoreNuGetDeps>
        <TOML_Version_Regex>(?:^|\s)%(ThunderstoreNuGetDeps.Identity)\s*?=\s*?\x22([^\s\x22]*)\x22</TOML_Version_Regex>
      </ThunderstoreNuGetDeps>
      <ThunderstoreNuGetDeps>
        <TOML_Version
          Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(_TOML_Deps_List_Text)', '%(ThunderstoreNuGetDeps.TOML_Version_Regex)'))"
        >$(
          [System.Text.RegularExpressions.Regex]::Match(
            '$(_TOML_Deps_List_Text)',
            '%(ThunderstoreNuGetDeps.TOML_Version_Regex)'
          )
          .Groups[1].Value
        )</TOML_Version>
      </ThunderstoreNuGetDeps>
    </ItemGroup>

    <!-- Error if the dependency is missing from the TOML -->
    <Error 
      Condition="'%(ThunderstoreNuGetDeps.Identity)' != '' and '%(ThunderstoreNuGetDeps.TOML_Version)' == ''"
      Text='Missing dependency in thunderstore.toml: %(ThunderstoreNuGetDeps.Identity)="%(ThunderstoreNuGetDeps.ResolvedVersion)"'
    />
    <!-- Error if the dependency's TOML version is mismatched from its package reference -->
    <Error 
      Condition="'%(ThunderstoreNuGetDeps.Identity)' != '' and '%(ThunderstoreNuGetDeps.TOML_Version)' != '%(ThunderstoreNuGetDeps.ResolvedVersion)'"
      Text="%(ThunderstoreNuGetDeps.Identity) version mismatch between PackageReference (%(ThunderstoreNuGetDeps.ResolvedVersion)) and thunderstore.toml (%(ThunderstoreNuGetDeps.TOML_Version))"
    />

    <!-- 
      At this point, there is no TS dependency present in the solution
      that is missing or mismatched from the TOML. However, there may be 
      some dependencies listed in the TOML that are not present in the
      solution. This is not necessarily erroneous, but may or may not
      be unintended, so we will throw a warning if we detect this.
    -->
    <PropertyGroup>
      <_TOML_Dep_Version_Regex>(?:^|\s)([^\s=]+)\s*?=\s*?\x22([^\s\x22]*)\x22</_TOML_Dep_Version_Regex>
    </PropertyGroup>
    <ItemGroup>
      <_TOML_Deps_All_Matches
        Condition="$([System.Text.RegularExpressions.Regex]::IsMatch('$(_TOML_Deps_List_Text)', '$(_TOML_Dep_Version_Regex)', System.Text.RegularExpressions.RegexOptions.Multiline))"
        Include="$([System.Text.RegularExpressions.Regex]::Matches('$(_TOML_Deps_List_Text)', '$(_TOML_Dep_Version_Regex)', System.Text.RegularExpressions.RegexOptions.Multiline))"
      />
      <_TOML_Deps_All_Matches Remove="@(ThunderstoreNuGetDeps)" />
      <_TOML_Deps_All_Matches Remove="BepInEx-BepInExPack" />
    </ItemGroup>
    <Warning
      Condition="'@(_TOML_Deps_All_Matches)' != ''"
      Text="The following dependencies in thunderstore.toml are not present as PackageReferences anywhere in the solution: @(_TOML_Deps_All_Matches)"
    />
  </Target>

  <!-- 
    Stage Thunderstore package for final output
  -->

  <Target Name="StageThunderstorePackage">
    <!-- Determine the artifacts dir of the output type we're interested in -->
    <PropertyGroup>
      <ArtifactsTypeToStage>bin</ArtifactsTypeToStage>
      <ArtifactsTypeToStage Condition="'$(BuildMode)' == 'publish'">publish</ArtifactsTypeToStage>
    </PropertyGroup>
    <ItemGroup>
      <!-- Stage all referenced projects' files under the determined artifacts type -->
      <FilesToStage Include="$(ArtifactsPath)\$(ArtifactsTypeToStage)\%(ProjectReference.Filename)\$(Configuration.ToLower())\**\*" />
      <!-- Ignore gitkeeps and unneeded assemblies-->
      <FilesToStage Remove="$(PackageDir)**\0Harmony.dll" />
      <FilesToStage Remove="$(PackageDir)**\Assembly-CSharp.dll" />
      <FilesToStage Remove="$(PackageDir)**\BepInEx.dll" />
      <FilesToStage Remove="$(PackageDir)**\Mono.Cecil*.dll" />
      <FilesToStage Remove="$(PackageDir)**\MonoMod.*.dll" />
      <FilesToStage Remove="$(PackageDir)**\Newtonsoft.Json.dll" />
      <FilesToStage Remove="$(PackageDir)**\System.*.dll" />
      <FilesToStage Remove="$(PackageDir)**\UnityEngine*.dll" />
      <!-- Stage markdown files (except README.md) -->
      <FilesToStage Include="$(PackageDir)docs\*.md" Exclude="$(PackageDir)docs\README.md" />
    </ItemGroup>
    <!-- Stage files to dist folder for use by TCLI -->
    <Copy
      DestinationFolder="$(PublishDir)dist\%(FilesToStage.RecursiveDir)"
      SourceFiles="@(FilesToStage)"
    />
    <!-- Register all copied files to be targeted by dotnet clean -->
    <ItemGroup>
      <FileWrites Include="$(PublishDir)dist\%(FilesToStage.RecursiveDir)%(FilesToStage.Filename)%(FilesToStage.Extension)" />
    </ItemGroup>
  </Target>

  <!-- 
    Run TCLI to create Thunderstore package, 
    and upload it if we're publishing
  -->

  <Target Name="CallTCLI">
    <Exec
      Command='dotnet tcli $(BuildMode) --package-name "$(PackageName)" --package-namespace "$(PackageAuthor)" --package-version "$(PackageVersion)"'
      ConsoleToMSBuild="true"
      WorkingDirectory="$(MSBuildProjectDirectory)"
    />
    <!-- Register outputted file to be targeted by dotnet clean -->
    <ItemGroup>
      <FileWrites Include="$(PublishDir)build\$(PackageAuthor)-$(PackageName)-$(PackageVersion).zip" />
    </ItemGroup>
  </Target>

  <!-- 
    Copy subpackages to artifacts if we are
    not a subpackage and are not publishing
  -->

  <Target 
    Name="EmitThunderstoreSubpackages" 
    Condition="'$(BuildMode)' != 'publish' And '$(IsPublishable)' == 'True'"
  >
    <ItemGroup>
      <SubPackagesToEmit Include="$(PackageDir)**\artifacts\tspublish\build\*.zip" />
      <SubPackagesToEmit Remove="$(PublishDir)build\*.zip" />
    </ItemGroup>
    <Copy
      Condition="'@(SubPackagesToEmit)' != ''"
      DestinationFolder="$(PublishDir)build\"
      SourceFiles="@(SubPackagesToEmit)"
    />
    <!-- Register copied files to be targeted by dotnet clean -->
    <ItemGroup Condition="'@(SubPackagesToEmit)' != ''">
      <FileWrites Include="$(PublishDir)build\%(SubPackagesToEmit.Filename)%(SubPackagesToEmit.Extension)" />
    </ItemGroup>
  </Target>

</Project>
